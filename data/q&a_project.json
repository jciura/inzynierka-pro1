[
  {
    "question": "Jakie parametry przyjmuje konstruktor Console() w pliku profile_pretty.py?",
    "answer": "Console() w profile_pretty.py przyjmuje parametry: file=io.StringIO(), color_system=\"truecolor\", width=100. Pokazuje to, ?e Console mo?e pisa? do StringIO zamiast stdout i obs?uguje ró?ne systemy kolorów."
  },
  {
    "question": "Co si? stanie je?li usun? metod? begin_capture() z klasy Console?",
    "answer": "Nie b?dzie mo?na przechwytywa? wyj?cia Console do stringa. Kod w profile_pretty.py przestanie dzia?a?, poniewa? u?ywa console.begin_capture() i console.end_capture() do mierzenia wydajno?ci renderowania."
  },
  {
    "question": "Jakie parametry ma metoda console.print() w przyk?adach kodu?",
    "answer": "Z chunków wida?, ?e console.print() mo?e przyjmowa? parametry: overflow=\"ignore\", crop=False, width=w (w Panel). Overflow kontroluje jak d?ugi tekst jest obs?ugiwany, crop czy przycina? zawarto??."
  },
  {
    "question": "Co robi metoda Segment.divide() na podstawie profile_divide.py?",
    "answer": "Segment.divide() dzieli list? segmentów na podstawie listy pozycji. W profile_divide.py dzieli segments na pozycjach [0, 1, 20, 24, 65, len(text)], co pozwala na precyzyjne ci?cie tekstu w okre?lonych miejscach."
  },
  {
    "question": "Jakie s? rzeczywiste parametry konstruktora Pretty() w kodzie?",
    "answer": "Pretty() w stress_test_pretty.py przyjmuje parametry: obiekt do wy?wietlania oraz indent_guides=True. To pokazuje, ?e Pretty mo?e wy?wietla? linie wci?? dla lepszej czytelno?ci zagnie?d?onych struktur."
  },
  {
    "question": "Co si? stanie je?li usun? parametr indent_guides z Pretty()?",
    "answer": "Linie wci?? przestan? by? wy?wietlane w pretty-printed strukturach danych. W stress_test_pretty.py zagnie?d?one struktury jak s?ownik DATA b?d? mniej czytelne bez wizualnych wskazówek wci??."
  },
  {
    "question": "Jakie faktyczne parametry ma Progress() w make_terminal_widths.py?",
    "answer": "Progress() w make_terminal_widths.py jest tworzony bez parametrów jako progress = Progress(). Pokazuje to, ?e Progress mo?e dzia?a? z domy?lnymi ustawieniami."
  },
  {
    "question": "Co robi metoda progress.add_task() w rzeczywistym kodzie?",
    "answer": "progress.add_task(\"Calculating table...\") tworzy nowe zadanie o nazwie \"Calculating table...\" i zwraca task_id. W make_terminal_widths.py s?u?y do ?ledzenia post?pu tworzenia tabeli szeroko?ci znaków."
  },
  {
    "question": "Jakie parametry ma progress.track() w faktycznym kodzie?",
    "answer": "progress.track() przyjmuje: iterable (iter_widths), task_id=make_table_task, total=len(_widths)-1, description=\"Testing...\". Pozwala to na dok?adne ?ledzenie post?pu z niestandardowym opisem i ca?kowit? liczb? elementów."
  },
  {
    "question": "Co si? stanie je?li usun? parametr total z progress.track()?",
    "answer": "Progress nie b?dzie wiedzia? ile elementów ma do przetworzenia, wi?c nie poka?e dok?adnego procentu uko?czenia. W make_terminal_widths.py pasek post?pu pokazywa?by tylko, ?e co? si? dzieje, ale bez informacji o post?pie."
  },
  {
    "question": "Jakie rzeczywiste importy u?ywa rich.console?",
    "answer": "Z chunków wida? importy: from rich.console import Console. To potwierdza, ?e Console jest g?ówn? klas? eksportowan? z modu?u rich.console."
  },
  {
    "question": "Co zawiera modu? rich.segment na podstawie importów?",
    "answer": "Z profile_divide.py: from rich.segment import Segment. Segment to klasa do reprezentacji fragmentów tekstu z formatowaniem, ma metod? divide() do dzielenia segmentów."
  },
  {
    "question": "Jakie parametry ma timer() z rich._timer?",
    "answer": "timer(\"Stress test\") przyjmuje opis jako parametr i dzia?a jako context manager. W stress_test_pretty.py mierzy czas wykonania p?tli renderuj?cej Panel z Pretty."
  },
  {
    "question": "Co si? stanie je?li usun? parametr width z Panel()?",
    "answer": "Panel b?dzie u?ywa? domy?lnej szeroko?ci. W stress_test_pretty.py p?tla for w in range(130) testuje Panel z ró?nymi szeroko?ciami - bez parametru width nie by?oby tego testu."
  },
  {
    "question": "Jakie faktyczne parametry ma install() z rich.pretty?",
    "answer": "install() w test_pretty.py przyjmuje: console (obiekt Console) i opcjonalnie max_depth=1. max_depth kontroluje g??boko?? zagnie?d?enia przy pretty printing."
  },
  {
    "question": "Co robi sys.displayhook w kontek?cie Rich?",
    "answer": "Rich mo?e zast?pi? sys.displayhook swoj? funkcj? pretty printing. W test_pretty.py install(console) zmienia sys.displayhook, dzi?ki czemu wszystkie obiekty w REPL s? automatycznie formatowane przez Rich."
  },
  {
    "question": "Co si? stanie je?li ustawi? force_jupyter=True w Console?",
    "answer": "Console b?dzie zachowywa? si? jakby dzia?a? w Jupyter Notebook. W test_pretty.py Console(force_jupyter=True) wp?ywa na sposób dzia?ania _ipy_display_hook i obs?ug? specjalnych metod _repr_*_."
  },
  {
    "question": "Jakie specjalne metody obs?uguje _ipy_display_hook?",
    "answer": "Z test_pretty.py wida? obs?ug?: _repr_html_(), _repr_latex_(), _repr_markdown_(). Je?li obiekt ma te metody, Rich deleguje renderowanie do Jupyter zamiast u?ywa? w?asnego formatowania."
  },
  {
    "question": "Co si? stanie je?li _repr_html_() zwróci None?",
    "answer": "Rich b?dzie szuka? innych metod _repr_*_ lub u?yje standardowego __repr__(). W test_pretty.py gdy _repr_latex_() zwraca None, Rich u?ywa _repr_html_() która zwraca \"hello\"."
  },
  {
    "question": "Co robi wcwidth w make_terminal_widths.py?",
    "answer": "wcwidth(chr(codepoint)) oblicza szeroko?? znaku w komórkach terminala. Rich u?ywa tego do budowania tabeli CELL_WIDTHS która mapuje znaki Unicode na ich szeroko?ci wy?wietlania."
  },
  {
    "question": "Jakie s? faktyczne warto?ci w DATA w stress_test_pretty.py?",
    "answer": "DATA to s?ownik z kluczami 'foo', 'bar', 'Dune' zawieraj?cy ró?ne typy Python: listy, tuple, set, None, bool. To testuje jak Pretty radzi sobie z ró?nymi strukturami danych."
  },
  {
    "question": "Co si? stanie je?li usun? subprocess.run() z make_terminal_widths.py?",
    "answer": "Wygenerowany plik _cell_widths.py nie b?dzie sformatowany przez black. Kod b?dzie dzia?a?, ale plik nie b?dzie mia? konsystentnego formatowania zgodnego ze standardami projektu."
  },
  {
    "question": "Jakie parametry ma range() w p?tlach testowych?",
    "answer": "range(10000) w profile_divide.py do testowania wydajno?ci Segment.divide(), range(130) w stress_test_pretty.py do testowania ró?nych szeroko?ci Panel, range(0, sys.maxunicode + 1) w make_terminal_widths.py do wszystkich znaków Unicode."
  },
  {
    "question": "Co robi perf_counter() w profile_divide.py?",
    "answer": "perf_counter() mierzy czas wykonania z wysok? precyzj?. U?ywany przed i po p?tli 10000 iteracji Segment.divide() do benchmarkowania wydajno?ci dzielenia segmentów."
  },
  {
    "question": "Co si? stanie je?li zmieni? liczb? iteracji z 10000 na 1000 w profile_divide.py?",
    "answer": "Test wydajno?ci b?dzie 10 razy szybszy ale mniej precyzyjny. Ma?e ró?nice w wydajno?ci mog? by? trudniejsze do zmierzenia z mniejsz? liczb? iteracji."
  },
  {
    "question": "Jakie parametry ma emoji.unicode_codes.EMOJI_ALIAS_UNICODE?",
    "answer": "To s?ownik mapuj?cy aliasy emoji na znaki Unicode, np. \":smile:\" -> \"?\". Rich mo?e u?ywa? tego do renderowania emoji w terminalu."
  },
  {
    "question": "Co robi metoda console.clear()?",
    "answer": "Czy?ci ekran terminala. Przydatne do od?wie?ania wyj?cia w trakcie dzia?ania aplikacji terminalowej."
  },
  {
    "question": "Co si? stanie je?li wywo?am console.status('Loading...') jako context manager?",
    "answer": "Wy?wietli w terminalu status \"Loading...\" z animacj? spinnera a? do wyj?cia z bloku. Przydatne do pokazywania informacji o trwaj?cych procesach."
  }
]
