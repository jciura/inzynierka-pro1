[
  {
    "file": "data_processor.py",
    "type": "method",
    "class": "DataProcessor",
    "method": "__init__",
    "content": "class DataProcessor:\n    def __init__(self):\n        self.data = []\n"
  },
  {
    "file": "data_processor.py",
    "type": "method",
    "class": "DataProcessor",
    "method": "load_csv",
    "content": "class DataProcessor:\n    def load_csv(self, file_path: str, delimiter: str = ',') -> None:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            reader = csv.DictReader(file, delimiter=delimiter)\n            self.data = [row for row in reader]\n"
  },
  {
    "file": "data_processor.py",
    "type": "method",
    "class": "DataProcessor",
    "method": "load_json",
    "content": "class DataProcessor:\n    def load_json(self, file_path: str) -> None:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            self.data = json.load(file)\n"
  },
  {
    "file": "data_processor.py",
    "type": "method",
    "class": "DataProcessor",
    "method": "save_json",
    "content": "class DataProcessor:\n    def save_json(self, file_path: str, indent: int = 4) -> None:\n        with open(file_path, 'w', encoding='utf-8') as file:\n            json.dump(self.data, file, indent=indent)\n"
  },
  {
    "file": "data_processor.py",
    "type": "method",
    "class": "DataProcessor",
    "method": "sort_data",
    "content": "class DataProcessor:\n    def sort_data(self, key: str, reverse: bool = False) -> None:\n        self.data.sort(key=lambda x: x.get(key, None), reverse=reverse)\n"
  },
  {
    "file": "math_operations.py",
    "type": "method",
    "class": "MathOperations",
    "method": "prime_numbers",
    "content": "class MathOperations:\n    def prime_numbers(limit: int) -> List[int]:\n        if limit < 2:\n            return []\n        primes = []\n        for num in range(2, limit + 1):\n            is_prime = True\n            for i in range(2, int(math.sqrt(num)) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(num)\n\n        return primes\n"
  },
  {
    "file": "math_operations.py",
    "type": "method",
    "class": "MathOperations",
    "method": "fibonacci",
    "content": "class MathOperations:\n    def fibonacci(n: int) -> int:\n        if n <= 0:\n            raise ValueError(\"n musi być większe od 0\")\n        if n == 1 or n == 2:\n            return 1\n        a, b = 1, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b\n"
  },
  {
    "file": "math_operations.py",
    "type": "method",
    "class": "MathOperations",
    "method": "gcd",
    "content": "class MathOperations:\n    def gcd(a: int, b: int) -> int:\n        return math.gcd(a, b)\n"
  },
  {
    "file": "math_operations.py",
    "type": "method",
    "class": "MathOperations",
    "method": "lcm",
    "content": "class MathOperations:\n    def lcm(a: int, b: int) -> int:\n        return abs(a * b) // MathOperations.gcd(a, b)\n"
  },
  {
    "file": "math_operations.py",
    "type": "method",
    "class": "MathOperations",
    "method": "quadratic_roots",
    "content": "class MathOperations:\n    def quadratic_roots(a: float, b: float, c: float) -> Tuple[Union[float, complex], Union[float, complex]]:\n        if a == 0:\n            raise ValueError(\"To nie jest równanie kwadratowe\")\n        delta = b ** 2 - 4 * a * c\n        if delta < 0:\n            sqrt_delta = math.sqrt(-delta) * 1j\n        else:\n            sqrt_delta = math.sqrt(delta)\n        x1 = (-b + sqrt_delta) / (2 * a)\n        x2 = (-b - sqrt_delta) / (2 * a)\n        return x1, x2\n"
  },
  {
    "file": "math_operations.py",
    "type": "method",
    "class": "MathOperations",
    "method": "is_perfect_number",
    "content": "class MathOperations:\n    def is_perfect_number(n: int) -> bool:\n        if n <= 1:\n            return False\n        divisors_sum = 1\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:\n                    divisors_sum += n // i\n        return divisors_sum == n\n"
  },
  {
    "file": "string_operations.py",
    "type": "method",
    "class": "String",
    "method": "reverse_string",
    "content": "class String:\n    def reverse_string(text: str) -> str:\n        return text[::-1]\n"
  },
  {
    "file": "string_operations.py",
    "type": "method",
    "class": "String",
    "method": "is_palindrome",
    "content": "class String:\n    def is_palindrome(s: str) -> bool:\n        return s == ''.join(reversed(s))\n"
  },
  {
    "file": "string_operations.py",
    "type": "method",
    "class": "String",
    "method": "count_words",
    "content": "class String:\n    def count_words(text: str) -> int:\n        return len(text.split())\n"
  },
  {
    "file": "string_operations.py",
    "type": "method",
    "class": "String",
    "method": "capitalize_words",
    "content": "class String:\n    def capitalize_words(text: str) -> str:\n        return text.title()\n"
  },
  {
    "file": "string_operations.py",
    "type": "method",
    "class": "String",
    "method": "get_total_words",
    "content": "class String:\n    def get_total_words(words: list) -> int:\n        return len(words)\n"
  },
  {
    "file": "string_operations.py",
    "type": "method",
    "class": "String",
    "method": "get_unique_words",
    "content": "class String:\n    def get_unique_words(words: list) -> int:\n        return len(set(words))\n"
  },
  {
    "file": "string_operations.py",
    "type": "method",
    "class": "String",
    "method": "get_longest_word",
    "content": "class String:\n    def get_longest_word(words: list) -> str:\n        if not words:\n            return ''\n        return max(words, key=len)\n"
  },
  {
    "file": "string_operations.py",
    "type": "method",
    "class": "String",
    "method": "get_shortest_word",
    "content": "class String:\n    def get_shortest_word(words: list) -> str:\n        if not words:\n            return ''\n        return min(words, key=len)\n"
  },
  {
    "file": "bank_account.py",
    "type": "method",
    "class": "BankAccount",
    "method": "__init__",
    "content": "class BankAccount:\n    def __init__(self, owner, balance=0):\n        self.owner = owner\n        self.balance = balance\n        self.transactions = []\n"
  },
  {
    "file": "bank_account.py",
    "type": "method",
    "class": "BankAccount",
    "method": "deposit",
    "content": "class BankAccount:\n    def deposit(self, amount):\n        if amount <= 0:\n            raise ValueError(\"Kwota musi być dodatnia\")\n        self.balance += amount\n        self.transactions.append(f\"Wpłata: {amount} zł\")\n"
  },
  {
    "file": "bank_account.py",
    "type": "method",
    "class": "BankAccount",
    "method": "withdraw",
    "content": "class BankAccount:\n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise ValueError(\"Brak środków\")\n        self.balance -= amount\n        self.transactions.append(f\"Wypłata: {amount} zł\")\n"
  },
  {
    "file": "bank_account.py",
    "type": "method",
    "class": "BankAccount",
    "method": "transfer",
    "content": "class BankAccount:\n    def transfer(self, amount, other_account):\n        self.withdraw(amount)\n        other_account.deposit(amount)\n        self.transactions.append(f\"Przelew do {other_account.owner}: {amount} zł\")\n"
  },
  {
    "file": "bank_account.py",
    "type": "method",
    "class": "BankAccount",
    "method": "get_balance",
    "content": "class BankAccount:\n    def get_balance(self):\n        return self.balance\n"
  },
  {
    "file": "bank_account.py",
    "type": "method",
    "class": "BankAccount",
    "method": "get_transaction_history",
    "content": "class BankAccount:\n    def get_transaction_history(self):\n        return self.transactions.copy()\n"
  },
  {
    "file": "bank_account.py",
    "type": "method",
    "class": "BankAccount",
    "method": "__str__",
    "content": "class BankAccount:\n    def __str__(self):\n        return f\"Konto: {self.owner}, saldo: {self.balance} zł\"\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "__init__",
    "content": "class Calculator:\n    def __init__(self):\n        self.memory = 0\n        self.history = []\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "add",
    "content": "class Calculator:\n    def add(self, a, b):\n        result = a + b\n        self.history.append(f\"{a} + {b} = {result}\")\n        return result\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "subtract",
    "content": "class Calculator:\n    def subtract(self, a, b):\n        result = a - b\n        self.history.append(f\"{a} - {b} = {result}\")\n        return result\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "multiply",
    "content": "class Calculator:\n    def multiply(self, a, b):\n        result = a * b\n        self.history.append(f\"{a} * {b} = {result}\")\n        return result\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "divide",
    "content": "class Calculator:\n    def divide(self, a, b):\n        if b == 0:\n            raise ValueError(\"Nie można dzielić przez zero\")\n        result = a / b\n        self.history.append(f\"{a} / {b} = {result}\")\n        return result\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "power",
    "content": "class Calculator:\n    def power(self, base, exponent):\n        result = base ** exponent\n        self.history.append(f\"{base} ^ {exponent} = {result}\")\n        return result\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "sqrt",
    "content": "class Calculator:\n    def sqrt(self, n):\n        if n < 0:\n            raise ValueError(\"Nie można obliczyć pierwiastka z liczby ujemnej\")\n        result = math.sqrt(n)\n        self.history.append(f\"√{n} = {result}\")\n        return result\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "logarithm",
    "content": "class Calculator:\n    def logarithm(self, n, base=math.e):\n        if n <= 0:\n            raise ValueError(\"Logarytm tylko dla liczb dodatnich\")\n        result = math.log(n, base)\n        self.history.append(f\"log_{base}({n}) = {result}\")\n        return result\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "factorial",
    "content": "class Calculator:\n    def factorial(self, n):\n        if n < 0:\n            raise ValueError(\"Silnia tylko dla liczb >= 0\")\n        result = math.factorial(n)\n        self.history.append(f\"{n}! = {result}\")\n        return result\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "memory_store",
    "content": "class Calculator:\n    def memory_store(self, value):\n        self.memory = value\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "memory_recall",
    "content": "class Calculator:\n    def memory_recall(self):\n        return self.memory\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "memory_clear",
    "content": "class Calculator:\n    def memory_clear(self):\n        self.memory = 0\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "get_history",
    "content": "class Calculator:\n    def get_history(self):\n        return self.history.copy()\n"
  },
  {
    "file": "calculator.py",
    "type": "method",
    "class": "Calculator",
    "method": "clear_history",
    "content": "class Calculator:\n    def clear_history(self):\n        self.history.clear()\n"
  },
  {
    "file": "Rectangle.py",
    "type": "method",
    "class": "Rectangle",
    "method": "__init__",
    "content": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n"
  },
  {
    "file": "Rectangle.py",
    "type": "method",
    "class": "Rectangle",
    "method": "area",
    "content": "class Rectangle:\n    def area(self):\n        return self.width * self.height\n"
  },
  {
    "file": "Rectangle.py",
    "type": "method",
    "class": "Rectangle",
    "method": "perimeter",
    "content": "class Rectangle:\n    def perimeter(self):\n        return 2 * (self.width + self.height)\n"
  },
  {
    "file": "Rectangle.py",
    "type": "method",
    "class": "Rectangle",
    "method": "is_square",
    "content": "class Rectangle:\n    def is_square(self):\n        return self.width == self.height\n"
  },
  {
    "file": "Rectangle.py",
    "type": "method",
    "class": "Rectangle",
    "method": "resize",
    "content": "class Rectangle:\n    def resize(self, new_width, new_height):\n        self.width = new_width\n        self.height = new_height\n"
  },
  {
    "file": "Rectangle.py",
    "type": "method",
    "class": "Rectangle",
    "method": "scale",
    "content": "class Rectangle:\n    def scale(self, factor):\n        self.width *= factor\n        self.height *= factor\n"
  },
  {
    "file": "Rectangle.py",
    "type": "method",
    "class": "Rectangle",
    "method": "diagonal",
    "content": "class Rectangle:\n    def diagonal(self):\n        return (self.width**2 + self.height**2) ** 0.5\n"
  },
  {
    "file": "Rectangle.py",
    "type": "method",
    "class": "Rectangle",
    "method": "__str__",
    "content": "class Rectangle:\n    def __str__(self):\n        return f\"Prostokąt {self.width} x {self.height}, pole: {self.area()}, obwód: {self.perimeter()}\"\n"
  },
  {
    "file": "date_time.py",
    "type": "method",
    "class": "DateTime",
    "method": "is_leap_year",
    "content": "class DateTime:\n    def is_leap_year(year: int) -> bool:\n        return calendar.isleap(year)\n"
  },
  {
    "file": "date_time.py",
    "type": "method",
    "class": "DateTime",
    "method": "days_between",
    "content": "class DateTime:\n    def days_between(date1: date, date2: date) -> int:\n        return abs((date2 - date1).days)\n"
  },
  {
    "file": "date_time.py",
    "type": "method",
    "class": "DateTime",
    "method": "get_weekday",
    "content": "class DateTime:\n    def get_weekday(target_date: date) -> str:\n        days = ['Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota', 'Niedziela']\n        return days[target_date.weekday()]\n"
  },
  {
    "file": "date_time.py",
    "type": "method",
    "class": "DateTime",
    "method": "format_datetime",
    "content": "class DateTime:\n    def format_datetime(dt: datetime, format_string: str = '%Y-%m-%d %H:%M:%S') -> str:\n        return dt.strftime(format_string)\n"
  },
  {
    "file": "date_time.py",
    "type": "method",
    "class": "DateTime",
    "method": "get_quarter",
    "content": "class DateTime:\n    def get_quarter(date_obj: date) -> int:\n        return (date_obj.month - 1) // 3 + 1\n"
  },
  {
    "file": "date_time.py",
    "type": "method",
    "class": "DateTime",
    "method": "get_days_in_month",
    "content": "class DateTime:\n    def get_days_in_month(year: int, month: int) -> int:\n        return calendar.monthrange(year, month)[1]\n"
  },
  {
    "file": "date_time.py",
    "type": "method",
    "class": "DateTime",
    "method": "is_weekend",
    "content": "class DateTime:\n    def is_weekend(date_obj: date) -> bool:\n        return date_obj.weekday() >= 5\n"
  },
  {
    "file": "date_time.py",
    "type": "method",
    "class": "DateTime",
    "method": "time_to_event",
    "content": "class DateTime:\n    def time_to_event(event_date: datetime) -> str:\n        now = datetime.now()\n        if event_date < now:\n            return \"Wydarzenie już się odbyło\"\n\n        diff = event_date - now\n        total_seconds = int(diff.total_seconds())\n\n        days = total_seconds // 86400\n        hours = (total_seconds % 86400) // 3600\n        minutes = (total_seconds % 3600) // 60\n\n        parts = []\n        if days > 0:\n            parts.append(f\"{days} dni\")\n        if hours > 0:\n            parts.append(f\"{hours} godzin\")\n        if minutes > 0 or not parts:\n            parts.append(f\"{minutes} minut\")\n\n        return \", \".join(parts)\n"
  }
]