[
  {
    "class": "BankAccount",
    "method": "__init__",
    "question": "Jakie dane przechowuje konto bankowe?",
    "answer": "Obiekt BankAccount przechowuje: owner (właściciela konta), balance (saldo) oraz transactions (listę transakcji)."
  },
  {
    "class": "BankAccount",
    "method": "deposit",
    "question": "Jak działa metoda deposit?",
    "answer": "Metoda deposit dodaje określoną kwotę do salda, jeśli kwota jest dodatnia, i zapisuje transakcję w historii."
  },
  {
    "class": "BankAccount",
    "method": "deposit",
    "question": "Co się stanie, gdy podamy ujemną kwotę do deposit?",
    "answer": "Zostanie rzucony wyjątek ValueError z komunikatem „Kwota musi być dodatnia”."
  },
  {
    "class": "BankAccount",
    "method": "withdraw",
    "question": "Co robi metoda withdraw?",
    "answer": "withdraw odejmuje podaną kwotę z konta, jeśli saldo jest wystarczające, i zapisuje wypłatę w historii transakcji."
  },
  {
    "class": "BankAccount",
    "method": "withdraw",
    "question": "Co się stanie, gdy spróbujemy wypłacić więcej niż mamy?",
    "answer": "Rzucony zostanie wyjątek ValueError z komunikatem „Brak środków”."
  },
  {
    "class": "BankAccount",
    "method": "transfer",
    "question": "Jak działa metoda transfer?",
    "answer": "Metoda transfer wykonuje przelew między kontami: najpierw wypłaca środki z konta źródłowego, potem wpłaca je na konto docelowe."
  },
  {
    "class": "BankAccount",
    "method": "transfer",
    "question": "Czy transfer zapisuje transakcję u obu użytkowników?",
    "answer": "Nie, tylko konto źródłowe zapisuje informację o przelewie."
  },
  {
    "class": "BankAccount",
    "method": "get_balance",
    "question": "Jak uzyskać aktualne saldo konta?",
    "answer": "Poprzez metodę get_balance(), która zwraca aktualną wartość balance."
  },
  {
    "class": "BankAccount",
    "method": "get_transaction_history",
    "question": "Jak uzyskać historię transakcji?",
    "answer": "Za pomocą metody get_transaction_history(), która zwraca kopię listy transactions."
  },
  {
    "class": "Rectangle",
    "method": "__str__",
    "question": "Do czego służy metoda __str__?",
    "answer": "Zwraca tekstową reprezentację konta, zawierającą imię właściciela i saldo."
  },
  {
    "class": "Calculator",
    "method": null,
    "question": "Co reprezentuje klasa Calculator?",
    "answer": "Klasa Calculator to kalkulator naukowy obsługujący działania arytmetyczne, potęgowanie, pierwiastkowanie, logarytmy, silnię oraz funkcje pamięci i historii."
  },
  {
    "class": "Calculator",
    "method": null,
    "question": "Jakie operacje matematyczne obsługuje klasa Calculator?",
    "answer": "Dodawanie, odejmowanie, mnożenie, dzielenie, potęgowanie, pierwiastkowanie, logarytmy i silnię."
  },
  {
    "class": "Calculator",
    "method": "add",
    "question": "Jak działa metoda add?",
    "answer": "Metoda add zwraca sumę dwóch liczb i zapisuje działanie w historii."
  },
  {
    "class": "Calculator",
    "method": "divide",
    "question": "Co się stanie, gdy w divide podamy 0 jako dzielnik?",
    "answer": "Zostanie rzucony wyjątek ValueError z komunikatem „Nie można dzielić przez zero”."
  },
  {
    "class": "Calculator",
    "method": "sqrt",
    "question": "Jak działa metoda sqrt?",
    "answer": "Metoda sqrt oblicza pierwiastek kwadratowy z liczby dodatniej. Dla liczby ujemnej zgłasza wyjątek."
  },
  {
    "class": "Calculator",
    "method": "logarithm",
    "question": "Jak działa metoda logarithm?",
    "answer": "Oblicza logarytm liczby n przy podstawie base. Domyślnie używana jest podstawa e (logarytm naturalny)."
  },
  {
    "class": "Calculator",
    "method": "logarithm",
    "question": "Co się stanie, gdy podamy wartość <= 0 do logarithm?",
    "answer": "Rzucony zostanie wyjątek ValueError z informacją, że logarytm jest tylko dla liczb dodatnich."
  },
  {
    "class": "Calculator",
    "method": "factorial",
    "question": "Jak działa metoda factorial?",
    "answer": "Zwraca silnię liczby n. Dla wartości ujemnych zgłasza wyjątek."
  },
  {
    "class": "Calculator",
    "method": "memory_store",
    "question": "Do czego służy memory_store?",
    "answer": "memory_store zapisuje dowolną wartość liczbową w pamięci kalkulatora."
  },
  {
    "class": "Calculator",
    "method": "memory_recall",
    "question": "Jak odczytać ostatnio zapisaną wartość z pamięci?",
    "answer": "Za pomocą metody memory_recall()."
  },
  {
    "class": "Calculator",
    "method": "memory_clear",
    "question": "Co robi metoda memory_clear?",
    "answer": "Czyści zapamiętaną wartość, ustawiając ją na 0."
  },
  {
    "class": "Calculator",
    "method": "get_history",
    "question": "Jak uzyskać historię operacji?",
    "answer": "Metoda get_history() zwraca listę wszystkich operacji wykonanych w kalkulatorze."
  },
  {
    "class": "Calculator",
    "method": "clear_history",
    "question": "Jak wyczyścić historię operacji?",
    "answer": "Użyj metody clear_history() – usuwa wszystkie zapisane działania."
  },
  {
    "class": "Calculator",
    "method": "__init__",
    "question": "Czy kalkulator zapisuje wyniki działań?",
    "answer": "Tak, każde działanie jest zapisywane w historii jako string z wynikiem."
  },
  {
    "class": "DataProcessor",
    "method": null,
    "question": "Co robi klasa DataProcessor?",
    "answer": "Klasa DataProcessor służy do wczytywania, przetwarzania i zapisywania danych z plików CSV i JSON."
  },
  {
    "class": "DataProcessor",
    "method": null,
    "question": "Jakie formaty danych obsługuje klasa DataProcessor?",
    "answer": "Obsługuje pliki w formacie CSV i JSON."
  },
  {
    "class": "DataProcessor",
    "method": "load_csv",
    "question": "Jak działa metoda load_csv?",
    "answer": "load_csv otwiera plik CSV, odczytuje jego zawartość jako listę słowników i zapisuje ją w atrybucie data."
  },
  {
    "class": "DataProcessor",
    "method": "load_csv",
    "question": "Jak można zmienić separator kolumn w load_csv?",
    "answer": "Poprzez przekazanie argumentu delimiter (np. `;` zamiast domyślnego `,`)."
  },
  {
    "class": "DataProcessor",
    "method": "load_json",
    "question": "Co robi metoda load_json?",
    "answer": "load_json otwiera plik JSON i wczytuje dane do atrybutu data jako listę lub słownik."
  },
  {
    "class": "DataProcessor",
    "method": "save_json",
    "question": "Jak zapisać dane do pliku JSON?",
    "answer": "Używając metody save_json, która zapisuje aktualne dane w formacie JSON do podanego pliku."
  },
  {
    "class": "DataProcessor",
    "method": "save_json",
    "question": "Do czego służy argument indent w save_json?",
    "answer": "Określa liczbę spacji używaną do formatowania JSON-a (czyli jego czytelność)."
  },
  {
    "class": "DataProcessor",
    "method": "sort_data",
    "question": "Jak działa metoda sort_data?",
    "answer": "sort_data sortuje dane według wartości podanego klucza (np. kolumny w CSV)."
  },
  {
    "class": "DataProcessor",
    "method": "sort_data",
    "question": "Czy można sortować malejąco?",
    "answer": "Tak, wystarczy ustawić parametr reverse na True."
  },
  {
    "class": "DataProcessor",
    "method": null,
    "question": "Gdzie przechowywane są dane po załadowaniu?",
    "answer": "Dane są przechowywane w atrybucie self.data jako lista słowników."
  },
  {
    "class": "DataProcessor",
    "method": null,
    "question": "Czy klasa DataProcessor zapisuje dane do pliku CSV?",
    "answer": "Nie, obecna wersja klasy obsługuje tylko zapis do pliku JSON."
  },
  {
    "class": "DataProcessor",
    "method": "sort_data",
    "question": "Co się stanie, jeśli klucz w sort_data nie istnieje w niektórych rekordach?",
    "answer": "Wartość będzie traktowana jako None, co może wpłynąć na kolejność sortowania, ale nie spowoduje błędu."
  },
  {
    "class": "DateTime",
    "method": null,
    "question": "Co robi klasa DateTime?",
    "answer": "Klasa DateTime zawiera zestaw statycznych metod do operacji na datach i czasie, takich jak sprawdzanie roku przestępnego, formatowanie dat czy obliczanie różnicy dni."
  },
  {
    "class": "DateTime",
    "method": "is_leap_year",
    "question": "Jak sprawdzić, czy rok jest przestępny?",
    "answer": "Używając metody is_leap_year(year), która zwraca True, jeśli rok jest przestępny."
  },
  {
    "class": "DateTime",
    "method": "days_between",
    "question": "Jak obliczyć liczbę dni między dwiema datami?",
    "answer": "Za pomocą metody days_between(date1, date2), która zwraca bezwzględną różnicę dni między dwiema datami."
  },
  {
    "class": "DateTime",
    "method": "get_weekday",
    "question": "Jak uzyskać nazwę dnia tygodnia dla konkretnej daty?",
    "answer": "Użyj metody get_weekday(date), która zwraca nazwę dnia tygodnia po polsku."
  },
  {
    "class": "DateTime",
    "method": "format_datetime",
    "question": "Jak sformatować datę i godzinę?",
    "answer": "Metoda format_datetime(dt, format_string) zwraca tekstowy zapis daty według podanego formatu (domyślnie „%Y-%m-%d %H:%M:%S”)."
  },
  {
    "class": "DateTime",
    "method": "get_quarter",
    "question": "Jak określić, do którego kwartału należy dana data?",
    "answer": "Używając metody get_quarter(date), która zwraca numer kwartału (1–4)."
  },
  {
    "class": "DateTime",
    "method": "get_days_in_month",
    "question": "Jak sprawdzić liczbę dni w konkretnym miesiącu?",
    "answer": "Metoda get_days_in_month(year, month) zwraca liczbę dni w danym miesiącu i roku, uwzględniając lata przestępne."
  },
  {
    "class": "DateTime",
    "method": "is_weekend",
    "question": "Jak sprawdzić, czy data wypada w weekend?",
    "answer": "Używając metody is_weekend(date), która zwraca True, jeśli to sobota lub niedziela."
  },
  {
    "class": "DateTime",
    "method": "time_to_event",
    "question": "Do czego służy metoda time_to_event?",
    "answer": "time_to_event oblicza czas pozostały do wydarzenia w dniach, godzinach i minutach. Jeśli wydarzenie już było, zwraca stosowny komunikat."
  },
  {
    "class": "DateTime",
    "method": "time_to_event",
    "question": "Czy time_to_event uwzględnia przeszłe daty?",
    "answer": "Tak, jeśli podana data jest w przeszłości, metoda zwraca komunikat „Wydarzenie już się odbyło”."
  },
  {
    "class": "DateTime",
    "method": "time_to_event",
    "question": "Jakie jednostki czasu zwraca metoda time_to_event?",
    "answer": "Zwraca dni, godziny i minuty w postaci czytelnego ciągu tekstowego."
  },
  {
    "class": "MathOperations",
    "method": null,
    "question": "Co robi klasa MathOperations?",
    "answer": "Klasa MathOperations zawiera statyczne metody wykonujące różne operacje matematyczne, takie jak silnia, liczby pierwsze, ciąg Fibonacciego, NWD, NWW, pierwiastki równania kwadratowego i liczby doskonałe."
  },
  {
    "class": "MathOperations",
    "method": "prime_numbers",
    "question": "Co robi metoda prime_numbers?",
    "answer": "Zwraca listę liczb pierwszych mniejszych lub równych podanemu limitowi, używając klasycznego algorytmu z dzieleniem do pierwiastka."
  },
  {
    "class": "MathOperations",
    "method": "fibonacci",
    "question": "Jak działa metoda fibonacci?",
    "answer": "Zwraca n-ty wyraz ciągu Fibonacciego. Pierwsze dwa wyrazy to 1. Dla n <= 0 zgłaszany jest wyjątek."
  },
  {
    "class": "MathOperations",
    "method": "gcd",
    "question": "Co oblicza metoda gcd?",
    "answer": "Oblicza największy wspólny dzielnik (NWD) dwóch liczb, korzystając z funkcji math.gcd."
  },
  {
    "class": "MathOperations",
    "method": "lcm",
    "question": "Co robi metoda lcm?",
    "answer": "Oblicza najmniejszą wspólną wielokrotność (NWW) dwóch liczb na podstawie wzoru: NWW = |a * b| / NWD(a, b)."
  },
  {
    "class": "MathOperations",
    "method": "quadratic_roots",
    "question": "Do czego służy metoda quadratic_roots?",
    "answer": "Oblicza pierwiastki równania kwadratowego ax² + bx + c = 0 i zwraca je jako krotkę (x1, x2). Obsługuje także pierwiastki zespolone."
  },
  {
    "class": "MathOperations",
    "method": "quadratic_roots",
    "question": "Co się stanie, gdy a = 0 w quadratic_roots?",
    "answer": "Rzucony zostanie wyjątek ValueError, ponieważ równanie przestaje być kwadratowe."
  },
  {
    "class": "MathOperations",
    "method": "quadratic_roots",
    "question": "Jak reprezentowane są liczby zespolone w quadratic_roots?",
    "answer": "Jeśli delta < 0, pierwiastki są liczbami zespolonymi dzięki użyciu składnika `1j`."
  },
  {
    "class": "MathOperations",
    "method": "is_perfect_number",
    "question": "Jak działa metoda is_perfect_number?",
    "answer": "Sprawdza, czy dana liczba n jest doskonała, czyli czy suma jej dzielników właściwych (bez samej liczby) równa się n."
  },
  {
    "class": "MathOperations",
    "method": "is_perfect_number",
    "question": "Co zwraca is_perfect_number dla n <= 1?",
    "answer": "Zwraca False, ponieważ liczby doskonałe muszą być większe niż 1."
  },
  {
    "class": "Rectangle",
    "method": null,
    "question": "Co reprezentuje klasa Rectangle?",
    "answer": "Klasa Rectangle reprezentuje prostokąt, przechowując jego szerokość i wysokość oraz udostępniając metody do obliczeń geometrycznych."
  },
  {
    "class": "Rectangle",
    "method": "area",
    "question": "Co robi metoda area?",
    "answer": "Zwraca pole prostokąta, obliczane jako szerokość razy wysokość."
  },
  {
    "class": "Rectangle",
    "method": "perimeter",
    "question": "Do czego służy metoda perimeter?",
    "answer": "Oblicza obwód prostokąta według wzoru: 2 * (szerokość + wysokość)."
  },
  {
    "class": "Rectangle",
    "method": "is_square",
    "question": "Jak działa metoda is_square?",
    "answer": "Sprawdza, czy prostokąt jest kwadratem, czyli czy szerokość jest równa wysokości."
  },
  {
    "class": "Rectangle",
    "method": "resize",
    "question": "Do czego służy metoda resize?",
    "answer": "Pozwala na ustawienie nowych wymiarów prostokąta poprzez podanie nowej szerokości i wysokości."
  },
  {
    "class": "Rectangle",
    "method": "scale",
    "question": "Co robi metoda scale?",
    "answer": "Skaluje prostokąt, mnożąc jego szerokość i wysokość przez podany współczynnik."
  },
  {
    "class": "Rectangle",
    "method": "diagonal",
    "question": "Jak obliczana jest przekątna prostokąta?",
    "answer": "Przekątna obliczana jest za pomocą twierdzenia Pitagorasa: sqrt(width² + height²)."
  },
  {
    "class": "Rectangle",
    "method": "__str__",
    "question": "Co zwraca metoda __str__?",
    "answer": "Zwraca czytelną reprezentację tekstową prostokąta z jego wymiarami, polem i obwodem."
  },
  {
    "class": "Rectangle",
    "method": null,
    "question": "Czy prostokąt może mieć ujemne wymiary?",
    "answer": "Klasa nie zawiera walidacji, więc teoretycznie tak – ale logicznie nie powinien."
  },
  {
    "class": "Rectangle",
    "method": null,
    "question": "Jakie są główne zastosowania klasy Rectangle?",
    "answer": "Może służyć do operacji geometrycznych, symulacji, rysowania GUI lub jako część większych systemów graficznych."
  },
  {
    "class": "String",
    "method": null,
    "question": "Co robi klasa String?",
    "answer": "Klasa String zawiera statyczne metody służące do analizy i przetwarzania tekstu, takie jak odwracanie, liczenie słów, sprawdzanie palindromów czy analiza listy słów."
  },
  {
    "class": "String",
    "method": "reverse_string",
    "question": "Do czego służy metoda reverse_string?",
    "answer": "Metoda reverse_string odwraca podany ciąg znaków (np. \"abc\" → \"cba\")."
  },
  {
    "class": "String",
    "method": "is_palindrome",
    "question": "Jak działa is_palindrome?",
    "answer": "Sprawdza, czy tekst jest palindromem, czyli czy czytany od tyłu jest taki sam jak od przodu."
  },
  {
    "class": "String",
    "method": "count_words",
    "question": "Co robi metoda count_words?",
    "answer": "Zlicza liczbę słów w podanym tekście na podstawie podziału po spacjach."
  },
  {
    "class": "String",
    "method": "capitalize_words",
    "question": "Jak działa metoda capitalize_words?",
    "answer": "Zwraca tekst, w którym pierwsza litera każdego słowa jest wielka, np. \"ala ma kota\" → \"Ala Ma Kota\"."
  },
  {
    "class": "String",
    "method": "get_total_words",
    "question": "Do czego służy get_total_words?",
    "answer": "Zwraca liczbę elementów w przekazanej liście słów."
  },
  {
    "class": "String",
    "method": "get_unique_words",
    "question": "Jak działa get_unique_words?",
    "answer": "Zlicza, ile unikalnych słów znajduje się w liście (ignorując powtórzenia)."
  },
  {
    "class": "String",
    "method": "get_longest_word",
    "question": "Co robi metoda get_longest_word?",
    "answer": "Zwraca najdłuższe słowo z listy. Jeśli lista jest pusta, zwraca pusty string."
  },
  {
    "class": "String",
    "method": "get_shortest_word",
    "question": "Co robi metoda get_shortest_word?",
    "answer": "Zwraca najkrótsze słowo z listy. Jeśli lista jest pusta, zwraca pusty string."
  },
  {
    "class": "String",
    "method": "is_palindrome",
    "question": "Czy metoda is_palindrome działa poprawnie dla tekstów z wielkimi literami i znakami interpunkcyjnymi?",
    "answer": "Nie – sprawdza dosłowne dopasowanie. Aby działała poprawnie w takich przypadkach, potrzebne jest czyszczenie tekstu (np. lowercase, usunięcie znaków)."
  },
  {
    "class": "Rectangle",
    "method": "resize",
    "question": "Co się stanie, jeśli w metodzie resize podamy liczby ujemne?",
    "answer": "Prostokąt przyjmie ujemne wymiary, co może prowadzić do błędów logicznych w dalszych obliczeniach."
  },
  {
    "class": "Rectangle",
    "method": "scale",
    "question": "Jak metoda scale zadziała przy wartości 0?",
    "answer": "Zerowa skala wyzeruje wymiary prostokąta, co uczyni go obiektem bez powierzchni i obwodu."
  },
  {
    "class": "Rectangle",
    "method": "diagonal",
    "question": "Oblicz wartość metody diagonal dla prostokąta 3x4.",
    "answer": "Zwróci 5.0, ponieważ sqrt(3² + 4²) = sqrt(9+16) = sqrt(25) = 5."
  },
  {
    "class": "Rectangle",
    "method": "is_square",
    "question": "Jakie zmiany wprowadzić, by metoda is_square zwróciła True?",
    "answer": "Należy ustawić `width` i `height` na takie same wartości."
  },
  {
    "class": "Rectangle",
    "method": "area",
    "question": "Jak zmodyfikować metodę area, aby zaokrąglała wynik do 2 miejsc po przecinku?",
    "answer": "Wystarczy zwrócić `round(self.width * self.height, 2)` zamiast surowego iloczynu."
  },
  {
    "class": "Rectangle",
    "method": "perimeter",
    "question": "Jak metoda perimeter zareaguje, gdy `width = 0` i `height = 5`?",
    "answer": "Zwróci wartość 10, bo obwód = 2*(0+5)."
  },
  {
    "class": "Rectangle",
    "method": "__str__",
    "question": "Jak zmieni się output metody __str__ po wykonaniu metody scale(2)?",
    "answer": "Wymiary zostaną podwojone, więc zmieni się opis w stringu oraz wartości pola i obwodu."
  },
  {
    "class": "Rectangle",
    "method": "__init__",
    "question": "Co się stanie, jeśli do konstruktora podamy tylko jeden argument?",
    "answer": "Zostanie rzucony TypeError, ponieważ __init__ wymaga dwóch pozycyjnych argumentów: width i height."
  },
  {
    "class": "Rectangle",
    "method": "resize",
    "question": "Jak zmienić metodę resize, aby nie pozwalała na ujemne liczby?",
    "answer": "Można dodać warunek: `if new_width < 0 or new_height < 0: raise ValueError()`."
  },
  {
    "class": "Rectangle",
    "method": "scale",
    "question": "Czy metoda scale zmienia proporcje prostokąta?",
    "answer": "Nie, metoda scale zachowuje proporcje, ponieważ zmienia szerokość i wysokość o ten sam współczynnik."
  },
  {
    "class": "String",
    "method": "reverse_string",
    "question": "Jak działa metoda reverse_string dla pustego ciągu?",
    "answer": "Zwraca pusty ciąg, ponieważ odwrócenie pustego tekstu nadal daje pusty tekst."
  },
  {
    "class": "String",
    "method": "is_palindrome",
    "question": "Czy metoda is_palindrome działa poprawnie dla tekstu 'Kajak'?",
    "answer": "Nie, bo sprawdza dokładne dopasowanie, a wielkość liter ma znaczenie. 'Kajak' != 'kajaK'."
  },
  {
    "class": "String",
    "method": "capitalize_words",
    "question": "Co się stanie, jeśli w capitalize_words podamy tekst z wieloma spacjami?",
    "answer": "Każde słowo, nawet po wielu spacjach, zostanie zapisane z wielkiej litery, a układ spacji zostanie uproszczony."
  },
  {
    "class": "String",
    "method": "count_words",
    "question": "Jak count_words działa, jeśli w tekście są tylko spacje?",
    "answer": "Zwróci 0, bo nie ma żadnych faktycznych słów po rozdzieleniu tekstu spacją."
  },
  {
    "class": "String",
    "method": "get_total_words",
    "question": "Co się stanie, jeśli get_total_words dostanie pustą listę?",
    "answer": "Zwróci 0, ponieważ w liście nie ma żadnych elementów."
  },
  {
    "class": "String",
    "method": "get_unique_words",
    "question": "Jaki wynik zwróci get_unique_words dla listy ['kot', 'pies', 'kot']?",
    "answer": "Zwróci 2, ponieważ tylko 'kot' i 'pies' to unikalne słowa."
  },
  {
    "class": "String",
    "method": "get_longest_word",
    "question": "Co się stanie, jeśli wszystkie słowa w liście mają tę samą długość?",
    "answer": "Zostanie zwrócone pierwsze wystąpienie najdłuższego słowa."
  },
  {
    "class": "String",
    "method": "get_shortest_word",
    "question": "Co zwraca metoda get_shortest_word, gdy lista zawiera tylko jedno słowo?",
    "answer": "Zwraca to jedno słowo, niezależnie od jego długości."
  },
  {
    "class": "String",
    "method": "is_palindrome",
    "question": "Jak można zmodyfikować is_palindrome, aby ignorowała wielkość liter i znaki specjalne?",
    "answer": "Należy dodać czyszczenie tekstu: np. `.lower()` i usuwanie znaków niealfabetycznych."
  },
  {
    "class": "String",
    "method": "capitalize_words",
    "question": "Czy metoda capitalize_words działa prawidłowo dla tekstów zawierających cyfry?",
    "answer": "Tak, ale cyfry nie są traktowane jak litery i nie zostaną zmienione."
  },
  {
    "class": "BankAccount",
    "method": "deposit",
    "question": "Co się stanie, jeśli metoda deposit otrzyma wartość 0?",
    "answer": "Zostanie rzucony wyjątek ValueError, ponieważ kwota musi być dodatnia."
  },
  {
    "class": "BankAccount",
    "method": "withdraw",
    "question": "Jak zachowa się metoda withdraw przy próbie wypłaty równej dokładnie saldu?",
    "answer": "Wypłata się powiedzie, a saldo konta wyniesie 0."
  },
  {
    "class": "BankAccount",
    "method": "transfer",
    "question": "Czy metoda transfer modyfikuje saldo konta docelowego?",
    "answer": "Tak, metoda wywołuje deposit na koncie docelowym, zwiększając jego saldo."
  },
  {
    "class": "BankAccount",
    "method": "get_transaction_history",
    "question": "Czy zmiana wyniku get_transaction_history wpływa na oryginalną listę transakcji?",
    "answer": "Nie, metoda zwraca kopię listy, więc oryginalna lista transakcji pozostaje bez zmian."
  },
  {
    "class": "BankAccount",
    "method": "__str__",
    "question": "Jaki format zwróci metoda __str__ dla konta o saldzie 200 i właścicielu 'Anna'?",
    "answer": "Zwróci: 'Konto: Anna, saldo: 200 zł'"
  },
  {
    "class": "BankAccount",
    "method": "transfer",
    "question": "Co się stanie, jeśli konto nie ma wystarczających środków do transferu?",
    "answer": "Zostanie rzucony wyjątek ValueError przez metodę withdraw."
  },
  {
    "class": "BankAccount",
    "method": "deposit",
    "question": "Czy każda udana wpłata zostaje zapisana w historii transakcji?",
    "answer": "Tak, każda udana wpłata dodaje opis do listy transactions."
  },
  {
    "class": "BankAccount",
    "method": "withdraw",
    "question": "Czy wypłata może spowodować ujemne saldo konta?",
    "answer": "Nie, jeśli wypłacana kwota przekracza saldo, metoda rzuci wyjątek i nie zmieni salda."
  },
  {
    "class": "BankAccount",
    "method": "__init__",
    "question": "Jakie wartości domyślne są ustawiane podczas tworzenia konta?",
    "answer": "Saldo domyślnie wynosi 0, a lista transakcji jest pusta."
  },
  {
    "class": "BankAccount",
    "method": "transfer",
    "question": "Czy metoda transfer dodaje wpis do historii transakcji odbiorcy?",
    "answer": "Nie, tylko konto źródłowe zapisuje informację o przelewie."
  },
  {
    "class": "String",
    "method": "reverse_string",
    "question": "Co się stanie, jeśli reverse_string otrzyma pusty string?",
    "answer": "Zwrócony zostanie również pusty string, ponieważ nie ma żadnych znaków do odwrócenia."
  },
  {
    "class": "String",
    "method": "is_palindrome",
    "question": "Czy is_palindrome zwróci True dla pojedynczego znaku?",
    "answer": "Tak, każdy pojedynczy znak jest technicznie palindromem."
  },
  {
    "class": "String",
    "method": "capitalize_words",
    "question": "Jak capitalize_words poradzi sobie z tekstem \"to jest KOT\"?",
    "answer": "Zamieni go na \"To Jest Kot\", ponieważ działa jak title case."
  },
  {
    "class": "String",
    "method": "get_total_words",
    "question": "Co się stanie, jeśli do get_total_words przekażesz pustą listę?",
    "answer": "Zwróci 0, ponieważ w liście nie ma żadnych elementów."
  },
  {
    "class": "String",
    "method": "get_unique_words",
    "question": "Jak get_unique_words traktuje powtarzające się słowa?",
    "answer": "Zlicza tylko unikalne słowa, ignorując duplikaty."
  },
  {
    "class": "String",
    "method": "get_longest_word",
    "question": "Co zwróci get_longest_word, jeśli w liście będą słowa o tej samej długości?",
    "answer": "Zwróci pierwsze najdłuższe słowo z listy."
  },
  {
    "class": "String",
    "method": "count_words",
    "question": "Czy count_words działa poprawnie, jeśli tekst zawiera wiele spacji?",
    "answer": "Tak, split() ignoruje nadmiarowe spacje, więc wynik będzie poprawny."
  },
  {
    "class": "String",
    "method": "is_palindrome",
    "question": "Czy is_palindrome rozpoznaje palindromy z wielkich i małych liter?",
    "answer": "Nie, porównanie jest czułe na wielkość liter. 'Ala' nie będzie uznana za palindrom."
  },
  {
    "class": "String",
    "method": "get_shortest_word",
    "question": "Jakie słowo zostanie zwrócone przez get_shortest_word w przypadku listy ['ala', 'ma', 'kota']?",
    "answer": "Zwróci 'ma', ponieważ jest najkrótszym słowem w liście."
  },
  {
    "class": "String",
    "method": "capitalize_words",
    "question": "Czy capitalize_words poprawnie działa na tekstach z cyframi?",
    "answer": "Tak, cyfry pozostaną niezmienione, a słowa literowe zostaną zapisane z wielkiej litery."
  },
  {
    "class": "MathOperations",
    "method": "prime_numbers",
    "question": "Co się stanie, jeśli przekażemy do prime_numbers wartość 1?",
    "answer": "Zostanie zwrócona pusta lista, ponieważ nie ma liczb pierwszych ≤ 1."
  },
  {
    "class": "MathOperations",
    "method": "fibonacci",
    "question": "Co się stanie, jeśli do fibonacci przekażemy wartość 0?",
    "answer": "Zostanie rzucony wyjątek ValueError, ponieważ n musi być większe od 0."
  },
  {
    "class": "MathOperations",
    "method": "gcd",
    "question": "Jakie będzie zachowanie funkcji gcd dla liczb 0 i 5?",
    "answer": "Zwróci 5, ponieważ każdy liczba jest dzielnikiem zera."
  },
  {
    "class": "MathOperations",
    "method": "lcm",
    "question": "Co zwróci lcm dla pary (4, 6)?",
    "answer": "Zwróci 12, ponieważ to najmniejsza wspólna wielokrotność 4 i 6."
  },
  {
    "class": "MathOperations",
    "method": "quadratic_roots",
    "question": "Jakie pierwiastki zwróci quadratic_roots dla a=1, b=2, c=1?",
    "answer": "Zwróci jeden pierwiastek podwójny: -1.0, ponieważ delta = 0."
  },
  {
    "class": "MathOperations",
    "method": "quadratic_roots",
    "question": "Co się stanie, jeśli a=0 w quadratic_roots?",
    "answer": "Zostanie rzucony wyjątek ValueError, bo to nie jest równanie kwadratowe."
  },
  {
    "class": "MathOperations",
    "method": "is_perfect_number",
    "question": "Jak is_perfect_number traktuje liczbę 6?",
    "answer": "Zwróci True, bo 6 to liczba doskonała (dzielniki: 1, 2, 3)."
  },
  {
    "class": "MathOperations",
    "method": "is_perfect_number",
    "question": "Czy liczba 28 zostanie uznana za doskonałą?",
    "answer": "Tak, ponieważ suma jej dzielników (1 + 2 + 4 + 7 + 14) to 28."
  },
  {
    "class": "MathOperations",
    "method": "prime_numbers",
    "question": "Jak działa prime_numbers dla limitu 10?",
    "answer": "Zwraca listę [2, 3, 5, 7], bo to wszystkie liczby pierwsze ≤ 10."
  },
  {
    "class": "MathOperations",
    "method": "fibonacci",
    "question": "Jaki wynik zwróci fibonacci(7)?",
    "answer": "Zwróci 13, ponieważ 7. wyraz ciągu Fibonacciego to 13."
  },
  {
    "class": "DateTime",
    "method": "is_leap_year",
    "question": "Co się stanie, jeśli do is_leap_year przekażemy rok 1900?",
    "answer": "Zwróci False, ponieważ 1900 nie jest rokiem przestępnym mimo podzielności przez 4 (nie jest podzielny przez 400)."
  },
  {
    "class": "DateTime",
    "method": "is_leap_year",
    "question": "Czy rok 2000 jest przestępny według metody is_leap_year?",
    "answer": "Tak, ponieważ 2000 jest podzielny przez 400, więc spełnia warunek przestępnego roku."
  },
  {
    "class": "DateTime",
    "method": "days_between",
    "question": "Co zwróci days_between dla dat 2025-01-01 i 2025-01-10?",
    "answer": "Zwróci 9, bo między tymi datami jest dokładnie 9 dni."
  },
  {
    "class": "DateTime",
    "method": "get_weekday",
    "question": "Co zwróci get_weekday dla daty 2025-04-19?",
    "answer": "Zwróci nazwę dnia tygodnia w języku polskim, np. 'Sobota'."
  },
  {
    "class": "DateTime",
    "method": "format_datetime",
    "question": "Jak sformatować datę do formatu tylko z godziną?",
    "answer": "Użyj format_datetime z formatem '%H:%M:%S', który zwróci tylko godzinę."
  },
  {
    "class": "DateTime",
    "method": "get_quarter",
    "question": "Jak działa get_quarter dla daty 2025-07-15?",
    "answer": "Zwróci 3, ponieważ lipiec należy do trzeciego kwartału."
  },
  {
    "class": "DateTime",
    "method": "get_days_in_month",
    "question": "Ile dni zwróci get_days_in_month dla lutego 2024?",
    "answer": "Zwróci 29, ponieważ 2024 jest rokiem przestępnym."
  },
  {
    "class": "DateTime",
    "method": "is_weekend",
    "question": "Jakie dni są uznawane za weekend przez is_weekend?",
    "answer": "Sobota (5) i niedziela (6) – metoda zwraca True dla tych dni tygodnia."
  },
  {
    "class": "DateTime",
    "method": "time_to_event",
    "question": "Co zwróci time_to_event, jeśli podamy datę z przeszłości?",
    "answer": "Zwróci komunikat: 'Wydarzenie już się odbyło'."
  },
  {
    "class": "DateTime",
    "method": "time_to_event",
    "question": "Czy time_to_event uwzględnia godziny i minuty?",
    "answer": "Tak, oprócz dni zwraca też pozostałe godziny i minuty do wydarzenia."
  },
  {
    "class": "DataProcessor",
    "method": "load_csv",
    "question": "Co się stanie, jeśli load_csv otrzyma ścieżkę do nieistniejącego pliku?",
    "answer": "Zostanie rzucony wyjątek FileNotFoundError, ponieważ metoda próbuje otworzyć nieistniejący plik."
  },
  {
    "class": "DataProcessor",
    "method": "load_csv",
    "question": "Jak zmodyfikować load_csv, aby obsługiwał pliki z nagłówkiem w innej kolejności?",
    "answer": "Nie trzeba nic zmieniać – DictReader działa niezależnie od kolejności kolumn, dopóki nagłówki są poprawne."
  },
  {
    "class": "DataProcessor",
    "method": "load_json",
    "question": "Czy load_json poradzi sobie z plikiem JSON zawierającym pojedynczy słownik zamiast listy?",
    "answer": "Tak, ale wtedy self.data będzie słownikiem, a nie listą – może to wpłynąć na inne metody operujące na listach."
  },
  {
    "class": "DataProcessor",
    "method": "load_json",
    "question": "Co się stanie, jeśli plik JSON będzie błędnie sformatowany?",
    "answer": "Metoda rzuci wyjątek json.JSONDecodeError."
  },
  {
    "class": "DataProcessor",
    "method": "save_json",
    "question": "Czy save_json nadpisuje istniejący plik?",
    "answer": "Tak, metoda otwiera plik w trybie 'w', co powoduje nadpisanie zawartości."
  },
  {
    "class": "DataProcessor",
    "method": "save_json",
    "question": "Jak zmodyfikować save_json, aby dane zapisywane były w jednej linii?",
    "answer": "Należy ustawić argument `indent=None` w funkcji json.dump()."
  },
  {
    "class": "DataProcessor",
    "method": "sort_data",
    "question": "Co się stanie, jeśli wywołamy sort_data z nieistniejącym kluczem?",
    "answer": "Sortowanie się powiedzie, ale rekordy bez klucza będą traktowane jako None i znajdą się na początku lub końcu listy."
  },
  {
    "class": "DataProcessor",
    "method": "sort_data",
    "question": "Czy sort_data modyfikuje dane w miejscu, czy zwraca nową listę?",
    "answer": "Modyfikuje dane w miejscu – operuje bezpośrednio na self.data."
  },
  {
    "class": "DataProcessor",
    "method": null,
    "question": "Co przechowuje atrybut self.data?",
    "answer": "self.data to lista słowników, w której każdy słownik reprezentuje rekord z pliku CSV lub JSON."
  },
  {
    "class": "DataProcessor",
    "method": null,
    "question": "Czy można użyć klasy DataProcessor do przetwarzania plików XML?",
    "answer": "Nie, obecna implementacja wspiera tylko CSV i JSON. Obsługa XML wymagałaby dodatkowej metody np. z użyciem xml.etree.ElementTree."
  },
  {
    "class": "Calculator",
    "method": "add",
    "question": "Co się stanie, gdy do add podamy tekst zamiast liczby?",
    "answer": "Zostanie rzucony wyjątek TypeError, ponieważ nie można dodać stringa do liczby."
  },
  {
    "class": "Calculator",
    "method": "divide",
    "question": "Co się stanie, jeśli dzielnik będzie równy 0?",
    "answer": "Zostanie rzucony wyjątek ValueError z komunikatem 'Nie można dzielić przez zero'."
  },
  {
    "class": "Calculator",
    "method": "factorial",
    "question": "Jak zmodyfikować metodę factorial, aby obsługiwała tylko liczby całkowite?",
    "answer": "Można dodać sprawdzenie `if not isinstance(n, int)` i rzucić wyjątek TypeError."
  },
  {
    "class": "Calculator",
    "method": "sqrt",
    "question": "Czy sqrt obsłuży liczbę zmiennoprzecinkową?",
    "answer": "Tak, metoda obsługuje zarówno liczby całkowite, jak i zmiennoprzecinkowe, o ile są większe lub równe 0."
  },
  {
    "class": "Calculator",
    "method": "logarithm",
    "question": "Jak zmodyfikować logarithm, aby przyjmował tylko dodatnie podstawy?",
    "answer": "Należy dodać warunek `if base <= 0 or base == 1: raise ValueError(...)` przed wywołaniem log()."
  },
  {
    "class": "Calculator",
    "method": "memory_store",
    "question": "Czy można zapisać do pamięci tekst?",
    "answer": "Tak, ponieważ metoda nie sprawdza typu – można zapisać dowolną wartość, ale inne metody mogą wtedy nie działać poprawnie."
  },
  {
    "class": "Calculator",
    "method": "get_history",
    "question": "Czy get_history zwraca oryginalną listę historii?",
    "answer": "Nie, zwraca kopię listy, więc jej modyfikacja nie wpływa na wewnętrzną historię."
  },
  {
    "class": "Calculator",
    "method": "power",
    "question": "Co się stanie, jeśli wykładnik będzie ujemny?",
    "answer": "Funkcja poprawnie obliczy potęgę ujemną, np. 2^(-2) = 0.25."
  },
  {
    "class": "Calculator",
    "method": "clear_history",
    "question": "Czy clear_history usuwa historię całkowicie?",
    "answer": "Tak, metoda usuwa wszystkie wpisy w liście history przy użyciu .clear()."
  },
  {
    "class": "Calculator",
    "method": null,
    "question": "Do czego można wykorzystać klasę Calculator w praktyce?",
    "answer": "Może służyć jako narzędzie edukacyjne, element aplikacji desktopowej lub jako backend do kalkulatora internetowego."
  }

]
